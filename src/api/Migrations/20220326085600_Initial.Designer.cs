// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Core;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ObjzerContext))]
    [Migration("20220326085600_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("api.Models.CTAbstractionAssignment", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasKey("ParentId");

                    b.ToTable("abstractions_assignments", (string)null);
                });

            modelBuilder.Entity("api.Models.CTEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("entities", (string)null);
                });

            modelBuilder.Entity("api.Models.CTHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("New")
                        .HasColumnType("TEXT");

                    b.Property<string>("Old")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("api.Models.CTInterfaceAssignment", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasKey("ParentId");

                    b.ToTable("interfaces_assignments", (string)null);
                });

            modelBuilder.Entity("CTContractCTObject", b =>
                {
                    b.Property<Guid>("ContractsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjectsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContractsId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("CTContractCTObject");
                });

            modelBuilder.Entity("api.Models.CTContract", b =>
                {
                    b.HasBaseType("api.Models.CTEntity");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("api.Models.CTObject", b =>
                {
                    b.HasBaseType("api.Models.CTEntity");

                    b.ToTable("objects", (string)null);
                });

            modelBuilder.Entity("api.Models.CTProperty", b =>
                {
                    b.HasBaseType("api.Models.CTEntity");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StringLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ObjectId");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("api.Models.CTAbstraction", b =>
                {
                    b.HasBaseType("api.Models.CTContract");

                    b.Property<Guid?>("CTAbstractionAssignmentParentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CTAbstractionAssignmentParentId");

                    b.ToTable("abstractions", (string)null);
                });

            modelBuilder.Entity("api.Models.CTEnumeration", b =>
                {
                    b.HasBaseType("api.Models.CTContract");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("enumerations", (string)null);
                });

            modelBuilder.Entity("api.Models.CTInterface", b =>
                {
                    b.HasBaseType("api.Models.CTContract");

                    b.Property<Guid?>("CTInterfaceAssignmentParentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CTInterfaceAssignmentParentId");

                    b.ToTable("interfaces", (string)null);
                });

            modelBuilder.Entity("api.Models.CTAbstractionAssignment", b =>
                {
                    b.HasOne("api.Models.CTAbstraction", "Parent")
                        .WithMany("Inheritances")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("api.Models.CTHistory", b =>
                {
                    b.HasOne("api.Models.CTEntity", "Entity")
                        .WithMany("History")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("api.Models.CTInterfaceAssignment", b =>
                {
                    b.HasOne("api.Models.CTInterface", "Parent")
                        .WithMany("Implementations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CTContractCTObject", b =>
                {
                    b.HasOne("api.Models.CTContract", null)
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.CTObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.CTContract", b =>
                {
                    b.HasOne("api.Models.CTEntity", null)
                        .WithOne()
                        .HasForeignKey("api.Models.CTContract", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.CTObject", b =>
                {
                    b.HasOne("api.Models.CTEntity", null)
                        .WithOne()
                        .HasForeignKey("api.Models.CTObject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.CTProperty", b =>
                {
                    b.HasOne("api.Models.CTEntity", null)
                        .WithOne()
                        .HasForeignKey("api.Models.CTProperty", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.CTObject", "Object")
                        .WithMany("Properties")
                        .HasForeignKey("ObjectId");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("api.Models.CTAbstraction", b =>
                {
                    b.HasOne("api.Models.CTAbstractionAssignment", null)
                        .WithMany("Children")
                        .HasForeignKey("CTAbstractionAssignmentParentId");

                    b.HasOne("api.Models.CTContract", null)
                        .WithOne()
                        .HasForeignKey("api.Models.CTAbstraction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.CTEnumeration", b =>
                {
                    b.HasOne("api.Models.CTContract", null)
                        .WithOne()
                        .HasForeignKey("api.Models.CTEnumeration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.CTInterface", b =>
                {
                    b.HasOne("api.Models.CTInterfaceAssignment", null)
                        .WithMany("Children")
                        .HasForeignKey("CTInterfaceAssignmentParentId");

                    b.HasOne("api.Models.CTContract", null)
                        .WithOne()
                        .HasForeignKey("api.Models.CTInterface", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.CTAbstractionAssignment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("api.Models.CTEntity", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("api.Models.CTInterfaceAssignment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("api.Models.CTObject", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("api.Models.CTAbstraction", b =>
                {
                    b.Navigation("Inheritances");
                });

            modelBuilder.Entity("api.Models.CTInterface", b =>
                {
                    b.Navigation("Implementations");
                });
#pragma warning restore 612, 618
        }
    }
}
