// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Core;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220416122831_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("api.Models.CTAbstraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTAbstractionAssignmentParentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CTAbstractionAssignmentParentId");

                    b.HasIndex("Deleted");

                    b.ToTable("abstractions", (string)null);
                });

            modelBuilder.Entity("api.Models.CTAbstractionAssignment", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParentId");

                    b.HasIndex("Deleted");

                    b.ToTable("abstraction_assignments", (string)null);
                });

            modelBuilder.Entity("api.Models.CTAbstractionProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AbstractionId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AbstractionId");

                    b.HasIndex("Deleted");

                    b.ToTable("abstraction_properties", (string)null);
                });

            modelBuilder.Entity("api.Models.CTEnumeration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Deleted");

                    b.ToTable("enumerations", (string)null);
                });

            modelBuilder.Entity("api.Models.CTEnumerationProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EnumerationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Deleted");

                    b.HasIndex("EnumerationId");

                    b.ToTable("enumeration_properties", (string)null);
                });

            modelBuilder.Entity("api.Models.CTHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTAbstractionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTAbstractionPropertyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTEnumerationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTEnumerationPropertyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTInterfaceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTInterfacePropertyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTObjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTObjectPropertyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Changes")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CTAbstractionId");

                    b.HasIndex("CTAbstractionPropertyId");

                    b.HasIndex("CTEnumerationId");

                    b.HasIndex("CTEnumerationPropertyId");

                    b.HasIndex("CTInterfaceId");

                    b.HasIndex("CTInterfacePropertyId");

                    b.HasIndex("CTObjectId");

                    b.HasIndex("CTObjectPropertyId");

                    b.HasIndex("EntityId");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("api.Models.CTInterface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTInterfaceAssignmentParentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CTInterfaceAssignmentParentId");

                    b.HasIndex("Deleted");

                    b.ToTable("interfaces", (string)null);
                });

            modelBuilder.Entity("api.Models.CTInterfaceAssignment", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParentId");

                    b.HasIndex("Deleted");

                    b.ToTable("interface_assignments", (string)null);
                });

            modelBuilder.Entity("api.Models.CTInterfaceProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Deleted");

                    b.HasIndex("InterfaceId");

                    b.ToTable("interface_properties", (string)null);
                });

            modelBuilder.Entity("api.Models.CTObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Deleted");

                    b.ToTable("objects", (string)null);
                });

            modelBuilder.Entity("api.Models.CTObjectProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StringLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Deleted");

                    b.HasIndex("ObjectId");

                    b.ToTable("object_properties", (string)null);
                });

            modelBuilder.Entity("CTAbstractionCTObject", b =>
                {
                    b.Property<Guid>("AbstractionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjectsId")
                        .HasColumnType("TEXT");

                    b.HasKey("AbstractionsId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("CTAbstractionCTObject");
                });

            modelBuilder.Entity("CTInterfaceCTObject", b =>
                {
                    b.Property<Guid>("InterfacesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjectsId")
                        .HasColumnType("TEXT");

                    b.HasKey("InterfacesId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("CTInterfaceCTObject");
                });

            modelBuilder.Entity("api.Models.CTAbstraction", b =>
                {
                    b.HasOne("api.Models.CTAbstractionAssignment", null)
                        .WithMany("Children")
                        .HasForeignKey("CTAbstractionAssignmentParentId");
                });

            modelBuilder.Entity("api.Models.CTAbstractionAssignment", b =>
                {
                    b.HasOne("api.Models.CTAbstraction", "Parent")
                        .WithMany("Inheritances")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("api.Models.CTAbstractionProperty", b =>
                {
                    b.HasOne("api.Models.CTAbstraction", "Abstraction")
                        .WithMany("Properties")
                        .HasForeignKey("AbstractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abstraction");
                });

            modelBuilder.Entity("api.Models.CTEnumerationProperty", b =>
                {
                    b.HasOne("api.Models.CTEnumeration", "Enumeration")
                        .WithMany("Properties")
                        .HasForeignKey("EnumerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enumeration");
                });

            modelBuilder.Entity("api.Models.CTHistory", b =>
                {
                    b.HasOne("api.Models.CTAbstraction", null)
                        .WithMany("History")
                        .HasForeignKey("CTAbstractionId");

                    b.HasOne("api.Models.CTAbstractionProperty", null)
                        .WithMany("History")
                        .HasForeignKey("CTAbstractionPropertyId");

                    b.HasOne("api.Models.CTEnumeration", null)
                        .WithMany("History")
                        .HasForeignKey("CTEnumerationId");

                    b.HasOne("api.Models.CTEnumerationProperty", null)
                        .WithMany("History")
                        .HasForeignKey("CTEnumerationPropertyId");

                    b.HasOne("api.Models.CTInterface", null)
                        .WithMany("History")
                        .HasForeignKey("CTInterfaceId");

                    b.HasOne("api.Models.CTInterfaceProperty", null)
                        .WithMany("History")
                        .HasForeignKey("CTInterfacePropertyId");

                    b.HasOne("api.Models.CTObject", null)
                        .WithMany("History")
                        .HasForeignKey("CTObjectId");

                    b.HasOne("api.Models.CTObjectProperty", null)
                        .WithMany("History")
                        .HasForeignKey("CTObjectPropertyId");
                });

            modelBuilder.Entity("api.Models.CTInterface", b =>
                {
                    b.HasOne("api.Models.CTInterfaceAssignment", null)
                        .WithMany("References")
                        .HasForeignKey("CTInterfaceAssignmentParentId");
                });

            modelBuilder.Entity("api.Models.CTInterfaceAssignment", b =>
                {
                    b.HasOne("api.Models.CTInterface", "Parent")
                        .WithOne("Implementations")
                        .HasForeignKey("api.Models.CTInterfaceAssignment", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("api.Models.CTInterfaceProperty", b =>
                {
                    b.HasOne("api.Models.CTInterface", "Interface")
                        .WithMany("Properties")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("api.Models.CTObjectProperty", b =>
                {
                    b.HasOne("api.Models.CTObject", "Object")
                        .WithMany("Properties")
                        .HasForeignKey("ObjectId");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("CTAbstractionCTObject", b =>
                {
                    b.HasOne("api.Models.CTAbstraction", null)
                        .WithMany()
                        .HasForeignKey("AbstractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.CTObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTInterfaceCTObject", b =>
                {
                    b.HasOne("api.Models.CTInterface", null)
                        .WithMany()
                        .HasForeignKey("InterfacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.CTObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.CTAbstraction", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Inheritances");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("api.Models.CTAbstractionAssignment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("api.Models.CTAbstractionProperty", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("api.Models.CTEnumeration", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("api.Models.CTEnumerationProperty", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("api.Models.CTInterface", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Implementations")
                        .IsRequired();

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("api.Models.CTInterfaceAssignment", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("api.Models.CTInterfaceProperty", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("api.Models.CTObject", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("api.Models.CTObjectProperty", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
